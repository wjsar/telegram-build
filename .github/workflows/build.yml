name: Build Telegram Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:/vcpkg
      QT_DIR: D:/a/telegram-build/Qt
      
    steps:
    - name: Clone Telegram Desktop
      run: |
        git clone --recursive https://${{ secrets.TOKEN }}@github.com/telegramdesktop/tdesktop.git
        cd tdesktop
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          C:/vcpkg
          D:/a/telegram-build/Qt
          build
        key: ${{ runner.os }}-deps-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        arch: 'win64_msvc2019_64'
        modules: 'qtwebengine'
        dir: ${{ env.QT_DIR }}
        
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '[17.0,18.0)'
        
    - name: Install vcpkg dependencies
      shell: powershell
      run: |
        if (-not (Test-Path $env:VCPKG_ROOT)) {
          Write-Host "Installing vcpkg..."
          git clone https://github.com/Microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
        }
        
        Write-Host "Installing dependencies..."
        & "$env:VCPKG_ROOT\vcpkg.exe" install `
          boost:x64-windows `
          boost-regex:x64-windows `
          protobuf:x64-windows `
          ffmpeg:x64-windows `
          tl-expected:x64-windows `
          ms-gsl:x64-windows `
          hunspell:x64-windows `
          libjpeg-turbo:x64-windows `
          lz4:x64-windows `
          minizip:x64-windows `
          openal-soft:x64-windows `
          opus:x64-windows `
          range-v3:x64-windows `
          rnnoise:x64-windows `
          zlib:x64-windows `
          openssl:x64-windows `
          abseil:x64-windows `
          libvpx:x64-windows `
          libwebp:x64-windows `
          mozjpeg:x64-windows `
          opus:x64-windows `
          xxhash:x64-windows `
          fmt:x64-windows `
          rapidjson:x64-windows `
          expected-lite:x64-windows `
          gsl-lite:x64-windows `
          rlottie:x64-windows `
          libpng:x64-windows `
          libogg:x64-windows `
          libvorbis:x64-windows
        
    - name: Install system dependencies
      run: |
        choco install ninja cmake yasm perl strawberryperl
        choco install -y --force python3
        pip3 install gyp-next cmake ninja setuptools wheel
        
    - name: Install Ada
      if: hashFiles('C:/Program Files (x86)/ada') == ''
      run: |
        git clone https://${{ secrets.TOKEN }}@github.com/ada-url/ada.git
        cd ada
        mkdir build && cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
        ninja
        ninja install
        
    - name: Configure
      working-directory: tdesktop
      env:
        BOOST_ROOT: C:/vcpkg/installed/x64-windows
        CMAKE_PREFIX_PATH: ${{ env.QT_DIR }}/5.15.2/msvc2019_64
      run: |
        mkdir build
        cd build
        cmake -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DTDESKTOP_API_TEST=ON `
          -DDESKTOP_APP_USE_PACKAGED=OFF `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DBoost_USE_STATIC_LIBS=ON `
          -DBOOST_ROOT="$env:BOOST_ROOT" `
          -DBoost_INCLUDE_DIR="$env:BOOST_ROOT/include" `
          -DTDESKTOP_USE_PACKAGED=ON `
          -DDESKTOP_APP_USE_PACKAGED=ON `
          -DDESKTOP_APP_DISABLE_CRASH_REPORTS=ON `
          -DCMAKE_PREFIX_PATH="$env:CMAKE_PREFIX_PATH" `
          ..
        
    - name: Build
      working-directory: tdesktop/build
      run: |
        ninja
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: telegram-desktop
        path: tdesktop/build/Telegram/Telegram.exe
